重点掌握
1.   自定义View
     a) 继承至View通过重写（测量，布局，绘制）实现组件功能
        如：画圈，扇形等一些特殊的几何图形
        图表功能  https://blog.csdn.net/u014133119/article/details/80923327
        重心：View的绘制流程  https://www.jianshu.com/p/f0bc39dbfa26

        将整个绘制过程分为三部分：Measure - Layout - Draw

        Measure 过程
        1. 测量过程由上至下，在measure过程的最后，每个视图将存储自己的尺寸大小和测量规格。
        2. measure过程会为一个View及其所有子节点的mMeasureWidth和mMeasuredHeight变量赋值， 该值可以通过getMeasuredWidth和getMeasuredHeight方法获得。
        3. measure过程的核心方法: measure() - onMeasure() - setMeasuredDimension().

        Layout 过程
        1. 子视图的具体位置都是相对于父视图而言的。View的onLayout()方法为空实现，而ViewGroup的onLayout为abstract，因此，自定义的View要继承ViewGroup时，必须实现onLayout函数。
        2. 在Layout过程中，子视图会调用getMeasuredWidth()和getMeasuredHeight()方法获取到measure过程得到mMeasuredWidth和mMeasuredHeight，作为自己的width和height。然后调用每一个子视图的layout()，来确定每个子视图在父视图中的位置。

        Draw 过程
        1. 所有视图最终都是调用View的draw方法进行绘制。 在自定义视图中， 也不应该复写该方法， 而是复写onDraw（）方法进行绘制， 如果自定义的视图确实要复写该方法，先调用super.draw()完成系统的绘制，再进行自定义的绘制。
        2. onDraw()方法默认是空实现，自定义绘制过程需要复写方法，绘制自身的内容。
        3. dispatchDraw()发起对子视图的绘制，在View中默认为空实现，ViewGroup复写了dispatchDraw()来对其子视图进行绘制。自定义的ViewGroup不应该对dispatchDraw()进行复写。


     b) 继承至ViewGroup。然后通过动态添加View（addView）
        如：多个View对象，获取viewgroup对象组合的效果

     c）继承至系统提供的布局组件（线性，相对，约束，列表recyclerview），重写组件的方法实现的功能
        如：通过重写recyclerview，实现分页加载和下拉刷新组件的效果
            通过重写recyclerview的item分隔线，实现时间轴列表，

          重心:ItemDecoration的分割线重写   https://www.jianshu.com/p/5af858ed6ca2

     d) 继承至系统提供的组件（文件textview，按钮button，图片imageView）
        如：通过集成imageview重写imageview中的方法，实现带有圆形边框的原形图效果
            https://www.jianshu.com/p/4f55200cea14

     e) 通过封装系统提供的布局和组件，实现一些特殊的布局效果。
        如：红点的消息提示


2.   Http与Https的区别

     a) http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。
     b) http和https使用的是完全不同的连接方式用的端口也不一样,前者是80,后者是443。
     c) http的连接很简单,是无状态的。短连接
     d) HTTPS协议是由SSL+HTTP协议构建的，可进行加密传输、身份认证的网络协议 要比http协议安全。

     HTTPS解决的问题：
     a) 信任主机的问题
        申请一个用于证明服务器用途类型的证书,该证书只有用于对应服务通信的时候,通过证书客户端才信任此主机.
        https因为有证书认证效率相比较低，但是安全。
     b) 通讯过程中的数据的泄密和被窜改
        通信的过程中有证书的认证，服务端和客户端之间的所有通讯,都是加密的.


3.  tcp/ip,udp
    tcp: 位于传输层， 提供可靠的字节流服务。如：打电话
    tcp：
        a)三次握手，四次挥手
        b)保证数据的安全
        c)保证数据包是完整
        d)性能效率低

        重心：
            三次握手   https://www.cnblogs.com/bj-mr-li/p/11106390.html
            第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。
            第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；
            第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。

            四次挥手
            1）客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。
            2）服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。
            3）客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。
            4）服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。
            5）客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。
            6）服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。

    场景：
        常见的软件的数据交互，银行系统。

    udp: 位于传输层的无连接协议，也称透明协议。如：广播
    udp:
        a)提供无连接的传输，通信前不需要建立连接
        b)提供不可靠的传输
        c)是面向数据报的传输，没有分组开销
        d)不提供拥塞控制和流量控制机制
        e)数据可以不完整
    场景：
        流媒体服务（直播，视频，音频，语音电话，视频电话）


4.  socket,websocket
https://www.cnblogs.com/buxiugangzi/p/11379883.html
. 心跳重连原由
心跳和重连的目的用一句话概括就是客户端和服务端保证彼此还活着，避免丢包发生。

websocket连接断开有以下两证情况：

前端断开
在使用websocket过程中，可能会出现网络断开的情况，比如信号不好，或者网络临时关闭，这时候websocket的连接已经断开，而不同浏览器有不同的机制，触发onclose的时机也不同，并不会理想执行websocket的onclose方法，我们无法知道是否断开连接，也就无法进行重连操作。

后端断开
如果后端因为一些情况需要断开ws，在可控情况下，会下发一个断连的消息通知，之后才会断开，我们便会重连。
如果因为一些异常断开了连接，我们是不会感应到的，所以如果我们发送了心跳一定时间之后，后端既没有返回心跳响应消息，前端又没有收到任何其他消息的话，我们就能断定后端主动断开了。

因此需要一种机制来检测客户端和服务端是否处于正常连接的状态。通过在指定时间间隔发送心跳包来保证连接正常，如果连接出现问题，就需要手动触发onclose事件，这时候便可进行重连操作。因此websocket心跳重连就应运而生。


5.   android与js交互 ----> 混合开发（H5）
    andorid与js交互：在android应用中嵌入了h5，实现android与h5之间的通信。
    特点：
    a) android调用js
        1）loadUrl("javascript:方法名('参数')")
        2）evaluateJava
    b) js调用android
        1）通过注册接口的方式addJavaInterface
        2) WebViewClient 的shouldOverrideUrlLoading ()方法回调拦截 url
        3) 通过 WebChromeClient 的onJsAlert()、onJsConfirm()、onJsPrompt（）方法回调拦截JS对话框alert()、confirm()、prompt（） 消息

6.   Glide


7.   eventbus


webview
webview
loadData https://www.baidu.com/link?url=CRqZMp_AO6_YKuMhj2xpwNyKVgyXdIZ2EUnrm7PtFFq44F83C5sp7x8vOZq6ZVao&wd=&eqid=d4d837a20040ab14000000035ed6f9dc


8.   kotlin


9.   flutter



