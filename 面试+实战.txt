重点掌握
1.   自定义View
     a) 继承至View通过重写（测量，布局，绘制）实现组件功能
        如：画圈，扇形等一些特殊的几何图形
        图表功能  https://blog.csdn.net/u014133119/article/details/80923327
        重心：View的绘制流程  https://www.jianshu.com/p/f0bc39dbfa26

        将整个绘制过程分为三部分：Measure - Layout - Draw

        Measure 过程
        1. 测量过程由上至下，在measure过程的最后，每个视图将存储自己的尺寸大小和测量规格。
        2. measure过程会为一个View及其所有子节点的mMeasureWidth和mMeasuredHeight变量赋值， 该值可以通过getMeasuredWidth和getMeasuredHeight方法获得。
        3. measure过程的核心方法: measure() - onMeasure() - setMeasuredDimension().

        Layout 过程
        1. 子视图的具体位置都是相对于父视图而言的。View的onLayout()方法为空实现，而ViewGroup的onLayout为abstract，因此，自定义的View要继承ViewGroup时，必须实现onLayout函数。
        2. 在Layout过程中，子视图会调用getMeasuredWidth()和getMeasuredHeight()方法获取到measure过程得到mMeasuredWidth和mMeasuredHeight，作为自己的width和height。然后调用每一个子视图的layout()，来确定每个子视图在父视图中的位置。

        Draw 过程
        1. 所有视图最终都是调用View的draw方法进行绘制。 在自定义视图中， 也不应该复写该方法， 而是复写onDraw（）方法进行绘制， 如果自定义的视图确实要复写该方法，先调用super.draw()完成系统的绘制，再进行自定义的绘制。
        2. onDraw()方法默认是空实现，自定义绘制过程需要复写方法，绘制自身的内容。
        3. dispatchDraw()发起对子视图的绘制，在View中默认为空实现，ViewGroup复写了dispatchDraw()来对其子视图进行绘制。自定义的ViewGroup不应该对dispatchDraw()进行复写。


     b) 继承至ViewGroup。然后通过动态添加View（addView）
        如：多个View对象，获取viewgroup对象组合的效果

     c）继承至系统提供的布局组件（线性，相对，约束，列表recyclerview），重写组件的方法实现的功能
        如：通过重写recyclerview，实现分页加载和下拉刷新组件的效果
            通过重写recyclerview的item分隔线，实现时间轴列表，

          重心:ItemDecoration的分割线重写   https://www.jianshu.com/p/5af858ed6ca2

     d) 继承至系统提供的组件（文件textview，按钮button，图片imageView）
        如：通过集成imageview重写imageview中的方法，实现带有圆形边框的原形图效果
            https://www.jianshu.com/p/4f55200cea14

     e) 通过封装系统提供的布局和组件，实现一些特殊的布局效果。
        如：红点的消息提示


2.   Http与Https的区别

     a) http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。
     b) http和https使用的是完全不同的连接方式用的端口也不一样,前者是80,后者是443。
     c) http的连接很简单,是无状态的。短连接
     d) HTTPS协议是由SSL+HTTP协议构建的，可进行加密传输、身份认证的网络协议 要比http协议安全。

     HTTPS解决的问题：
     a) 信任主机的问题
        申请一个用于证明服务器用途类型的证书,该证书只有用于对应服务通信的时候,通过证书客户端才信任此主机.
        https因为有证书认证效率相比较低，但是安全。
     b) 通讯过程中的数据的泄密和被窜改
        通信的过程中有证书的认证，服务端和客户端之间的所有通讯,都是加密的.


3.  tcp/ip,udp


4.  socket,websocket


5.   android与js交互 ----> 混合开发（H5）


6.   kotlin


7.   flutter



